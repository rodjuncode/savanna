[18/06/2014 - 20h50 - GMT -3]
I've been running into several bumps and walls during the 
coding of the Travelling Salesman for the Savanna GA Stack. 
The modeling of the Dna for this particular problem is not
even close to be considered usual.
The main problem resides in the way the possible routes are
mapped into the Dna and the consequent complications on the
mutation and mainly the crossover operation.
The first challenge is how to create valid routes.
Each route must contain only one occurrence of each city, but
also needs to contain all the possible cities. So (Todo 1) We 
might want to have a route validator method.
The second important thing to have is a efficient way of storing
the map for the problem. It's important to notice that the
path from A to B must have the same cost of the path from B to A.
Inconsistencies of such nature will cause flaws in the process, 
hence is vital to (Todo 2) have a map validator method.
I believe that the calculator of cost for a given route is fine,
like the methods to compare two possible routes. We should be 
okay on those.
Also, the mutation concept is fine, but it must be generalized
for any possible number of nodes (right now it works only for
4 cities). So (Todo 3) we need to refactor the mutation method.
The Factory is not implemented yet. (Todo 4) The generate method
needs to be coded following the simple idea of starting from 
city A, and then picking randomly each next city, respecting the
basic rule of never repeating the city and making sure it passes
through all the cities.
The greatest challenge so far is the concept for crossover. I've
drafted a concept for it, although I am not sure if it covers the
needs. The basic idea is poorly represented on the following notes:

Cities & Distances
(1)
  A B C D E F G
A - 2 2 4 5 8 5 
B 2 - 8 3 8 1 5
C 2 8 - 7 2 2 1 
D 4 3 7 - 1 4 4
E 5 8 2 1 - 5 2
F 8 1 2 4 5 - 3
G 5 5 1 4 2 3 -

(2)
  A B C D E F G H I J K L M N O P Q R S T
A - 1 2 4 5 8 1 2 1 7 9 2 4 2 7 9 2 3 4 2
B 1 - 1 3 8 2 5 3 2 5 7 1 3 2 9 4 2 3 4 1
C 2 1 - 1 2 2 1 8 4 3 6 7 2 1 8 6 7 2 3 5
D 4 3 1 - 1 4 4 3 2 5 6 2 8 6 3 2 5 4 7 2
E 5 8 2 1 - 1 2 4 7 3 2 1 7 6 3 2 7 2 2 4
F 8 2 2 4 1 - 1 8 3 2 1 4 6 8 2 3 5 3 2 9
G 1 5 1 4 2 1 - 1 2 7 2 1 5 3 2 9 2 1 4 5
H 2 3 8 3 4 8 1 - 1 2 8 9 1 2 3 2 8 4 3 2
I 1 2 4 2 7 3 2 1 - 1 2 3 2 4 6 8 2 2 1 6
J 7 5 3 5 3 2 7 2 1 - 1 4 8 3 2 3 6 2 6 7 
K 9 7 6 6 2 1 2 8 2 1 - 1 4 5 6 2 9 3 2 8
L 2 1 7 2 1 4 1 9 3 4 1 - 1 2 1 6 5 3 8 2
M 4 3 2 8 7 6 5 1 2 8 4 1 - 1 2 5 3 4 2 8
N 2 2 1 6 6 8 3 2 4 3 5 2 1 - 1 3 2 6 7 9
O 7 9 8 3 3 2 2 3 6 2 6 1 2 1 - 1 9 7 4 3 
P 9 4 6 2 2 3 9 2 8 3 2 6 5 3 1 - 1 4 2 7
Q 2 2 7 5 7 5 2 8 2 6 9 5 3 2 9 1 - 1 3 6 
R 3 3 2 4 2 3 1 4 2 2 3 3 4 6 7 4 1 - 1 8
S 4 4 3 7 2 2 4 3 1 6 2 8 2 7 4 2 3 1 - 1
T 2 1 5 2 4 9 5 2 6 7 8 2 8 9 3 7 6 8 1 -

(1)
King - A C G B F D E A -> 2 + 1 + 5 + 1 + 4 + 1 + 5 = 19 cost
Lion - A B E C G D F A -> 2 + 8 + 2 + 1 + 4 + 4 + 8 = 29 cost

(2)
King - A C G B F D E A -> 2 + 1 + 5 + 2 + 4 + 1 + 5 = 20 cost
Lion - A B E C G D F A -> 1 + 8 + 2 + 1 + 4 + 4 + 8 = 28 cost

1) Finds the "move" from King with lower cost, that isn't present on Lion
2) Replaces that move in Lion, making the changes to keep the route valid

In this example, we would have this solution as a cub:
(1) Cub - A B F C G D E A -> 2 + 1 + 2 + 1 + 4 + 1 + 5 = 16
(2) Cub - A B F C G D E A -> 1 + 2 + 2 + 1 + 4 + 1 + 5 = 16


(Todo 5) Yeah, this needs to be implemented. Also, (Todo 6) the operation
described above needs to be encapsulated so we can reproduce it as
many times as we need in a single crossover operation.

[19/06/2014 - 11h13 - GMT -3]
Alright, so I was never a huge fan of the way I was storing the maps.
Today I came up with an idea: instead of emulating a matrix with
a HashMap inside of a HashMap (my main goal here was to have the key->value
pair capability) I could just have a "one-dimension" hash that would store
the costs of each movement between cities (i.e. "AB" => 3, "BC"=> 3).
This might be a pain to code, but will definitely be more efficient.
Also, since the map is becoming a little creature by itself, I probably
should turn it into a separate class. Then the checkMap method should be moved
to there. So (Todo 2) now becomes creating the Map class, implementing the
new method for keeping the info about the distances and allowing the
call of checkMap map method (ok, Todo 2.1 and Todo 2.2). 

[19/06/2014 - 17h46 - GMT -3]
(Todo 2) The Map class and the map validator are done.

[20/06/2014 - 12h14 - GMT -3]
(Todo 3) The mutation operator and (Todo 4) The Factory are implemented.
However, for now they are not prepared to deal with any kinds of maps. The whole
code is being prepared focusing for now only on the specific map listed above, with
minor changes so we know for sure the best solution for it, for tests purposes.
After we succeed in the first test, I wanna go back to these methods and prepare
them to solve a map of any size. Let's move to (Todo 5) and (Todo 6) now.

[20/06/2014 - 17h00 - GMT -3]
Ok, so we have pretty much everything implemented, (Todo 5 and 6) are done, but 
the crossover operation is still very glitchy. I need to break it down and 
refactor it using unit testing. 

[21/06/2014 - 10h34 - GMT -3]
Yesterday I got a lot of progress on the Travelling Salesman class (and its derivatives).
However, and I consider myself guilty, there is a certain lack of documentation. Like
no documentation. And it's becoming a mess. I need to stop now and organize all this
code. The bug is on the crossover method, that's for sure. Ok, that's not totally sure.
So I guess the first thing would be making sure of this. (Todo 7) I need to isolate
this bug, so I will replace the crossover operation for something really simple and 
test the program again. I need to get to a point where there is no bugs at all. I am
hoping the glitch is gone after I do it and then I am gonna be sure the problem resides
on the crossover method. (Todo 8) I need to document the TravellingSalesman, 
TravellingSalesmanFactory and TravellingSalesmanMap classes. That includes also reviewing
each method and making sure I need it that way. I don't want to spend lots of time
refactoring now, but if I can improve the code fast, I guess it wont hurt to make
little changes. Then the most important, (Todo 9) I need to solve this bug. The best 
approach is to abstract some of the steps to other methods, so the code gets simpler,
and this way I can do the development with unit testing. I bet the main reason
this bug appeared was cause I let myself go and wrote a bunch of stuff without making
unit testing. Let's go back then and be more loyal to the TDD philosophy. After that the
code will be ready to receive some cool extensions, like the creating maps automatically.
I wanna test the GA with 20 or 25 cities.

[21/06/2014 - 11h30 - GMT -3]
Good news! I've accomplished (Todo 7), isolating the crossover method. 
Then I runned the program hundreds of times and had no bug at all. The problem is 
on that method, for sure. Time to organized all the code before refactoring
this chunk.
 
[22/06/2014 - 10h27 - GMT -3]
So, we had lots of things going on since yesterday. I've fixed that first bug
and the GA is running much more smooth now. However, there are still two bugs.
One is quite frequent and has to do with the fact that sometimes the crossover
can't find its shortest move that is not on its mate. An empty string is returned
and I get a OutOfBoundException. The other problem, much less frequent, is generating
invalid routes. I am beat on this one for now. Need further testing.
 
[22/06/2014 - 23h03 - GMT -3]
Ok, so I managed to fix the bug in the crossover. It was kinda a pain in the ass
to find it. It was happening to a very particular scenario and due to the fact
that lots of things in the algorithm are randomized, it's hard to create tests
to find the bug. Although I must admit that part of the bug was being caused
but two embasarrassing  mistakes I've made. Basically, I was trying to duplicate
data structure objects via direct assignment. So I was chaning stuff I shouldn't
touch. Anyways, it's fixed. Now I still need to deal with crossover when the
two Dna's involved are the same (I will call that Todo 10) and I need to organized
everything. I am sure there is lots to refactor code, looking for more efficient
or organized ways of doing stuff (Todo 11). Overall I am satisfied with the base of the
Genetic Algorithm, cause I barely had to touch it.   

[23/06/2014 - 10h11 - GMT -3]
The TravellingSalesman problem is finally done and with no bugs. Most of the time,
running the GA finds the best solution in less than 100 generations. A few times
the search get stuck in a local minor. I believe this can be solved with
adjustments on the mutation operation. Anyways, I need to organize the code
a little better now, improve documentation, make it more efficient, but I feel
I could try a bigger map at this point. Let's see what I can do about that
before moving on.

[24/06/2014 - 20h35 - GMT -3]
1/1 - Finished on generation 303 under 0 minute(s).
A - H - J - K - F - G - R - Q - P - O - N - M - L - E - D - C - B - T - S - I - A - 22
2/2 - Finished on generation 17094 under 0 minute(s).
A - I - H - M - L - G - C - D - E - F - K - J - N - O - P - Q - R - S - T - B - A - 22
3/3 - Finished on generation 1987 under 0 minute(s).
A - B - C - N - M - H - D - E - F - G - R - Q - P - O - L - K - J - I - S - T - A - 22
3/4 - Finished on generation 100000 under 4 minute(s).
A - G - R - Q - P - O - H - M - S - T - B - N - C - D - E - L - K - F - J - I - A - 25
3/5 - Finished on generation 100000 under 4 minute(s).
A - Q - P - S - R - G - F - E - D - C - N - O - J - K - I - H - M - L - B - T - A - 24
4/6 - Finished on generation 4279 under 0 minute(s).
A - I - S - R - Q - P - J - K - F - G - H - M - N - O - L - E - D - C - B - T - A - 22
5/7 - Finished on generation 2028 under 0 minute(s).
A - G - H - M - N - C - D - E - L - K - F - O - P - Q - R - J - I - S - T - B - A - 22
5/8 - Finished on generation 100000 under 5 minute(s).
A - I - B - C - D - E - F - G - H - N - M - L - K - J - O - P - Q - R - S - T - A - 23
5/9 - Finished on generation 100000 under 4 minute(s).
A - G - C - B - L - N - M - O - P - Q - R - S - T - H - D - E - F - K - J - I - A - 25
6/10 - Finished on generation 2325 under 0 minute(s).
A - I - Q - P - O - L - G - H - M - N - C - D - E - F - K - J - R - S - T - B - A - 22
7/11 - Finished on generation 302 under 0 minute(s).
A - B - L - G - C - D - E - F - K - J - I - H - M - N - O - P - Q - R - S - T - A - 20
8/12 - Finished on generation 21526 under 1 minute(s).
A - G - R - S - T - D - E - F - K - J - I - H - M - L - B - C - N - O - P - Q - A - 22
8/13 - Finished on generation 100000 under 5 minute(s).
A - T - D - C - G - R - S - I - H - M - N - Q - P - O - F - J - K - E - L - B - A - 25
9/14 - Finished on generation 77413 under 3 minute(s).
A - G - H - J - K - F - E - D - C - N - M - L - O - P - Q - R - S - T - B - I - A - 22
10/15 - Finished on generation 173 under 0 minute(s).
A - B - C - D - E - F - G - L - K - J - I - H - M - N - O - P - Q - R - S - T - A - 20
11/16 - Finished on generation 442 under 0 minute(s).
A - I - J - K - L - M - H - D - E - F - G - C - N - O - P - Q - R - S - T - B - A - 22
12/17 - Finished on generation 37828 under 30 minute(s).
A - B - T - S - R - Q - P - O - D - C - N - M - H - I - J - K - F - E - L - G - A - 22
13/18 - Finished on generation 626 under 0 minute(s).
A - I - J - K - F - E - D - T - S - R - Q - P - O - N - C - B - L - M - H - G - A - 21
14/19 - Finished on generation 4097 under 0 minute(s).
A - I - H - M - N - C - D - E - L - B - T - S - R - G - F - K - J - O - P - Q - A - 22
14/20 - Finished on generation 100000 under 5 minute(s).
A - Q - P - R - S - T - B - C - D - E - F - G - H - M - N - O - L - K - J - I - A - 24
14/21 - Finished on generation 100000 under 4 minute(s).
A - C - D - E - L - O - P - H - M - N - Q - B - T - S - R - G - F - K - J - I - A - 24
15/22 - Finished on generation 27 under 0 minute(s).
A - B - C - D - E - F - G - L - K - J - I - H - M - N - O - P - Q - R - S - T - A - 20
15/23 - Finished on generation 100000 under 5 minute(s).
A - I - J - H - M - N - O - L - G - R - Q - P - K - F - B - C - D - E - S - T - A - 24
16/24 - Finished on generation 3401 under 0 minute(s).
A - B - T - S - E - D - C - N - O - P - Q - R - G - F - K - L - M - H - J - I - A - 22
17/25 - Finished on generation 744 under 0 minute(s).
A - B - C - D - E - F - K - J - I - H - G - N - M - L - O - P - Q - R - S - T - A - 22
18/26 - Finished on generation 7186 under 0 minute(s).
A - B - T - S - R - Q - P - D - E - F - O - N - C - G - H - M - L - K - J - I - A - 22
18/27 - Finished on generation 100000 under 5 minute(s).
A - I - S - R - Q - P - O - N - M - H - J - K - L - G - C - F - E - D - T - B - A - 23
19/28 - Finished on generation 56 under 0 minute(s).
A - G - H - P - O - L - M - N - C - D - E - F - K - J - I - Q - R - S - T - B - A - 22
20/29 - Finished on generation 9845 under 0 minute(s).
A - B - C - D - E - R - Q - P - O - N - L - M - H - G - F - K - J - I - S - T - A - 22
21/30 - Finished on generation 3602 under 0 minute(s).
A - G - L - E - F - K - J - I - S - R - Q - P - O - N - M - H - T - D - C - B - A - 22
21/31 - Finished on generation 100000 under 5 minute(s).
A - I - J - K - F - G - H - M - L - E - D - B - Q - P - O - N - C - R - S - T - A - 24
22/32 - Finished on generation 19081 under 1 minute(s).
A - I - S - T - B - L - G - C - D - E - F - K - J - R - Q - P - O - N - M - H - A - 22
23/33 - Finished on generation 427 under 0 minute(s).
A - T - B - F - K - J - I - S - R - G - H - M - N - C - D - E - L - O - P - Q - A - 22
24/34 - Finished on generation 825 under 0 minute(s).
A - N - M - L - O - P - Q - R - G - H - J - K - F - E - D - C - B - T - S - I - A - 22
25/35 - Finished on generation 25578 under 1 minute(s).
A - G - L - E - F - K - J - I - S - R - Q - P - O - N - M - H - D - C - B - T - A - 22
26/36 - Finished on generation 54960 under 2 minute(s).
A - I - D - E - F - K - J - H - M - L - B - T - S - R - Q - P - O - N - C - G - A - 22
27/37 - Finished on generation 80843 under 4 minute(s).
A - H - M - N - O - P - Q - R - J - I - S - T - B - C - D - E - L - K - F - G - A - 22
28/38 - Finished on generation 3773 under 0 minute(s).
A - B - C - N - O - P - Q - R - J - K - F - G - H - M - L - E - D - T - S - I - A - 22
29/39 - Finished on generation 2373 under 0 minute(s).
A - B - C - D - E - L - G - H - M - N - O - P - Q - R - F - K - J - I - S - T - A - 22
29/40 - Finished on generation 100000 under 5 minute(s).
A - B - C - N - M - O - L - K - J - I - D - E - F - G - H - P - Q - R - S - T - A - 23
30/41 - Finished on generation 21787 under 1 minute(s).
A - I - H - M - N - C - D - E - F - K - J - O - P - Q - R - S - T - B - L - G - A - 21
31/42 - Finished on generation 12892 under 0 minute(s).
A - I - J - K - L - O - P - Q - R - S - M - N - C - D - E - F - G - H - T - B - A - 22
32/43 - Finished on generation 8816 under 0 minute(s).
A - G - H - I - J - K - F - O - P - Q - R - S - E - D - C - N - M - L - B - T - A - 22
33/44 - Finished on generation 3497 under 0 minute(s).
A - T - S - R - Q - P - O - J - K - F - G - L - E - D - C - N - M - H - I - B - A - 22
33/45 - Finished on generation 100000 under 5 minute(s).
A - B - L - E - P - Q - R - S - I - J - K - F - G - H - M - O - N - C - D - T - A - 23
34/46 - Finished on generation 25760 under 1 minute(s).
A - T - S - R - Q - P - E - F - K - J - I - D - C - G - H - M - N - O - L - B - A - 22
35/47 - Finished on generation 195 under 0 minute(s).
A - I - H - N - M - L - K - J - O - P - Q - R - S - T - B - C - D - E - F - G - A - 22
36/48 - Finished on generation 2285 under 0 minute(s).
A - B - L - M - O - P - Q - N - C - D - E - F - K - J - I - H - G - R - S - T - A - 22
37/49 - Finished on generation 1928 under 0 minute(s).
A - B - C - D - E - F - G - H - P - O - N - M - L - K - J - I - Q - R - S - T - A - 22
37/50 - Finished on generation 100000 under 5 minute(s).
A - T - S - R - Q - P - N - O - M - H - I - J - K - L - G - F - E - D - C - B - A - 23
38/51 - Finished on generation 24820 under 1 minute(s).
A - I - H - J - K - F - G - R - Q - P - O - N - M - L - B - C - D - E - S - T - A - 22
39/52 - Finished on generation 1038 under 0 minute(s).
A - I - H - M - N - O - P - Q - R - S - T - B - C - D - E - L - K - J - F - G - A - 21
40/53 - Finished on generation 280 under 0 minute(s).
A - I - S - T - B - C - D - E - L - M - N - O - P - Q - R - J - K - F - G - H - A - 22
40/54 - Finished on generation 100000 under 4 minute(s).
A - N - M - H - T - B - C - G - F - E - D - L - O - P - Q - R - S - K - J - I - A - 24
41/55 - Finished on generation 1578 under 0 minute(s).
A - G - L - O - P - Q - R - S - T - B - C - N - M - H - D - E - F - K - J - I - A - 22
41/56 - Finished on generation 100000 under 4 minute(s).
A - G - H - P - O - N - M - L - T - S - R - Q - B - C - D - E - F - K - J - I - A - 23
42/57 - Finished on generation 7738 under 0 minute(s).
A - I - H - G - C - N - M - L - D - E - F - K - J - O - P - Q - R - S - T - B - A - 22
43/58 - Finished on generation 79 under 0 minute(s).
A - B - T - S - R - Q - P - D - E - F - K - J - I - H - M - C - N - O - L - G - A - 22
44/59 - Finished on generation 873 under 0 minute(s).
A - B - T - S - R - Q - P - O - J - K - L - M - N - C - D - E - F - G - H - I - A - 21
45/60 - Finished on generation 34744 under 1 minute(s).
A - L - O - P - Q - B - T - S - R - G - H - M - N - C - D - E - F - K - J - I - A - 22
46/61 - Finished on generation 1028 under 0 minute(s).
A - G - F - C - D - E - L - K - J - I - H - M - N - O - P - Q - R - S - T - B - A - 21
47/62 - Finished on generation 653 under 0 minute(s).
A - B - T - S - R - Q - P - O - J - K - F - E - L - M - N - C - D - I - H - G - A - 22
48/63 - Finished on generation 1756 under 0 minute(s).
A - I - H - M - L - K - J - N - O - P - Q - R - S - T - B - C - D - E - F - G - A - 22
49/64 - Finished on generation 49949 under 2 minute(s).
A - I - J - K - F - E - D - C - N - O - P - Q - R - S - M - L - G - H - T - B - A - 22
49/65 - Finished on generation 100000 under 5 minute(s).
A - G - K - F - E - L - B - T - S - R - Q - P - O - D - C - N - M - H - J - I - A - 24
50/66 - Finished on generation 6893 under 0 minute(s).
A - B - T - S - R - G - F - E - D - C - N - M - H - J - K - L - O - P - Q - I - A - 22
50/67 - Finished on generation 100000 under 5 minute(s).
A - B - C - N - M - H - I - D - P - O - L - E - K - J - F - G - Q - R - S - T - A - 25
50/68 - Finished on generation 100000 under 5 minute(s).
A - B - L - K - F - J - I - H - M - O - N - C - D - E - P - Q - G - R - S - T - A - 24
51/69 - Finished on generation 11228 under 0 minute(s).
A - I - J - K - L - O - P - Q - R - S - T - B - C - N - M - H - D - E - F - G - A - 22
52/70 - Finished on generation 37227 under 1 minute(s).
A - B - L - M - N - O - P - Q - R - S - E - D - C - G - F - K - J - I - H - T - A - 22
53/71 - Finished on generation 81 under 0 minute(s).
A - G - H - M - L - R - Q - P - O - N - C - D - E - F - K - J - I - S - T - B - A - 22
54/72 - Finished on generation 3508 under 0 minute(s).
A - G - F - E - D - C - N - O - P - Q - R - J - K - L - B - T - S - M - H - I - A - 22
55/73 - Finished on generation 39986 under 2 minute(s).
A - I - S - R - Q - P - O - J - K - F - E - D - C - N - M - H - T - B - L - G - A - 22
55/74 - Finished on generation 100000 under 5 minute(s).
A - N - M - H - I - S - F - K - J - O - P - Q - R - G - L - E - D - C - B - T - A - 23
56/75 - Finished on generation 10508 under 0 minute(s).
A - Q - R - S - T - B - C - N - O - P - D - E - F - K - J - I - H - M - L - G - A - 22
56/76 - Finished on generation 100000 under 5 minute(s).
A - G - L - O - P - Q - R - C - N - M - H - D - E - F - B - T - S - K - J - I - A - 25
56/77 - Finished on generation 100000 under 5 minute(s).
A - B - C - N - M - O - P - Q - R - S - T - D - E - L - K - F - G - H - J - I - A - 23
57/78 - Finished on generation 4240 under 0 minute(s).
A - B - T - S - R - Q - P - O - L - M - N - C - G - H - D - E - F - K - J - I - A - 22
58/79 - Finished on generation 1244 under 0 minute(s).
A - B - C - N - M - H - I - J - K - F - G - L - E - D - O - P - Q - R - S - T - A - 22
59/80 - Finished on generation 8235 under 0 minute(s).
A - I - J - O - N - M - H - P - Q - R - S - T - B - C - D - E - L - K - F - G - A - 22
59/81 - Finished on generation 100000 under 5 minute(s).
A - Q - R - G - H - M - N - C - D - E - L - B - T - S - P - O - F - K - J - I - A - 23
60/82 - Finished on generation 411 under 0 minute(s).
A - B - Q - P - O - L - E - F - K - J - I - H - M - N - C - D - T - S - R - G - A - 22


 


